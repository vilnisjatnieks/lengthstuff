### Vilnis Jatnieks
### These are my results after adding part 5

### Tests

In: []
Expected Out: 0
Rationale: Test if the length function works on an empty list (base case)


In: [0]
Expect Out: 1
Rationale: Test if the length function works on a list with one element (k)


In: [0 1]
Expected Out: 2
Rationale: Test if the length function works on a list with two elements (k+1)


### C
vjatnieks@ginny:~/cs451/length$ ./length_in_C
Test 1: Empty list []
Expected: 0
Recursive: 0
Tail-recursive: 0
Fold: 0

Test 2: Single element [0]
Expected: 1
Recursive: 1
Tail-recursive: 1
Fold: 1

Test 3: Two elements [0,1]
Expected: 2
Recursive: 2
Tail-recursive: 2
Fold: 2


### Scheme
> (len '())
0
> (len2 '())
0
> (len3 '())
0
> (len '(0))
1
> (len2 '(0))
1
> (len3 '(0))
1
> (len '(0 1))
2
> (len2 '(0 1))
2
> (len3 '(0 1))
2


### ML

[opening length.ml]
val len = fn : 'a list -> int
val len_helper = fn : int -> 'a list -> int
val len2 = fn : 'a list -> int
val fold = fn : 'a list -> ('a -> 'b -> 'b) -> 'b -> 'b
GC #0.0.0.0.1.21:   (0 ms)
val inc = fn : 'a -> int -> int
val len3 = fn : 'a list -> int
val it = () : unit
- len([]);
val it = 0 : int
- len2([]);
val it = 0 : int
- len3([]);
val it = 0 : int
- len([0]);
val it = 1 : int
- len2([0]);
val it = 1 : int
- len3([0]);
val it = 1 : int
- len([0,1]);
val it = 2 : int
- len2([0,1]);
val it = 2 : int
- len3([0,1]);
val it = 2 : int



### Java
Test 1 - empty list
Length (Recursive): 0
Length (Tail Recursive): 0
Length (Fold): 0
Test 2 - one element list
Length (Recursive): 1
Length (Tail Recursive): 1
Length (Fold): 1
Test 3 - two element list
Length (Recursive): 2
Length (Tail Recursive): 2
Length (Fold): 2


### Smalltalk
Test 1 - empty list
Length (Recursive): 0
Length (Tail Recursive): 0
Length (Fold): 0
Test 2 - one element list
Length (Recursive): 1
Length (Tail Recursive): 1
1 point skip
Test 3 - two element list
Length (Recursive): 2
Length (Tail Recursive): 2
1 point skip


### TypeScript
Test 1: Empty list []
Recursive: 0
Tail-recursive: 0
Fold: 0

Test 2: Single element [0]
Recursive: 1
Tail-recursive: 1
Fold: 1

Test 3: Two elements [0, 1]
Recursive: 2
Tail-recursive: 2
Fold: 2


### Prolog
- consult("length.pl").
true.

?- length_recursive([], X).
X = 0.

?- length_recursive([0], X).
X = 1.

?- length_recursive([0, 1], X).
X = 2.

?- length_tailrecursive([], X).
X = 0.

?- length_tailrecursive([0], X).
X = 1.

?- length_tailrecursive([0, 1], X).
X = 2.

?- fold().
1 point pass
true.



